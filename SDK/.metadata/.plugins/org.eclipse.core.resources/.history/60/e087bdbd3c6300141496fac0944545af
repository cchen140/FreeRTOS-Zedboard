/*
 * main_attack.c
 *
 *  Created on: Oct 29, 2014
 *      Author: CY
 */

/* Kernel includes. */
#include "FreeRTOS.h"
#include "task.h"

/* Attack configuration */
//#include "AttackConfig.h"

/* Attack function includes. */
#include "CacheFunction.h"

#define	GET_TIME32BIT *(volatile u32 *) (GLOBAL_TMR_BASEADDR + GTIMER_COUNTER_LOWER_OFFSET);

/* The tasks running under FreeRTOS. */
static void prvHackerTask( void *pvParameters );
static void prvAppTask(void *pvParameters);


void main_attack( void )
{

	/* Variable Declaration */
	// None.

    xil_printf("Program starts. \r\n");

    xil_printf("\r\n");
    xil_printf("Cache configuration: \r\n");
#ifdef	USE_L1_I_CACHE
    xil_printf("  L1 I-Cache:\t enabled (default) \r\n");
#else
    xil_printf("  L1 I-Cache:\t disabled \r\n");
    Xil_L1ICacheDisable();
#endif

#ifdef	USE_L1_D_CACHE
    xil_printf("  L1 D-Cache:\t enabled (default) \r\n");
#else
    xil_printf("  L1 D-Cache:\t disabled \r\n");
    Xil_L1DCacheDisable();
#endif

#ifdef	USE_L2_CACHE
    xil_printf("  L2 Cache:\t enabled (default) \r\n");
#else
    xil_printf("  L2 Cache:\t disabled \r\n");
    Xil_L2CacheDisable();
#endif


	/* Print system configurations. */
	xil_printf("\r\n");
	xil_printf("Condition:\r\n");
	xil_printf("  (2 Tasks are running under FreeRTOS.)\r\n");
	xil_printf("  - HackerTask: \r\n");
	xil_printf("      delay = %dms\r\n", HACKER_TASK_DELAY_TIME_MS);
	xil_printf("      buffer = %d-byte\r\n", SIZE_OF_HACKER_ARRAY*4);
	xil_printf("      priority = %d\r\n", HACKER_TASK_PRIORITY);
	xil_printf("  - AppTask: \r\n");
	xil_printf("      delay = %dms\r\n", APP_TASK_DELAY_TIME_MS);
	xil_printf("      buffer = %d-byte\r\n", SIZE_OF_APP_ARRAY*4);
	xil_printf("      priority = %d\r\n", APP_TASK_PRIORITY);

	xil_printf("\r\n");
	xil_printf("-------------------------------\r\n");
	//xil_printf("Bytes\tTime\thex(Start, End)\r\n");
	//xil_printf("Bytes\tCycles\t\r\n");
	xil_printf("-------------------------------\r\n");


	xTaskCreate( prvAppTask,			/* The function that implements the task. */
					"App", 				/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					APP_TASK_STACK_SIZE, 				/* The size of the stack to allocate to the task. */
					NULL, 				/* The parameter passed to the task - not used in this case. */
					APP_TASK_PRIORITY, 	/* The priority assigned to the task. */
					NULL );				/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvHackerTask,			/* The function that implements the task. */
					"Hacker", 			/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					HACKER_TASK_STACK_SIZE, 				/* The size of the stack to allocate to the task. */
					NULL, 				/* The parameter passed to the task - not used in this case. */
					HACKER_TASK_PRIORITY, 	/* The priority assigned to the task. */
					NULL );


	/* Start the tasks and timer running. */
	vTaskStartScheduler();


	while (1);

}

/*****************************************************************************/
/**
* A FreeRTOS task function
* Keep monitoring the cache utilization of other tasks by measuring the time
* difference of accessing cache caused by cache hit and cache miss.
*
* @param	None
*
* @return	None
*
* @note		None.
*
******************************************************************************/
u32 hackerArray[SIZE_OF_HACKER_ARRAY];
static void prvHackerTask( void *pvParameters ){
	//u32 hackerArray[SIZE_OF_HACKER_ARRAY];
	u32 u32TimeDiff;

	/* Fill the cache. */
	taskENTER_CRITICAL();
	getTimeLoadIntArrayRange(hackerArray, SIZE_OF_HACKER_ARRAY);
	taskEXIT_CRITICAL();

	while (1){

		taskENTER_CRITICAL();

		u32TimeDiff = getTimeLoadIntArrayRange(hackerArray, SIZE_OF_HACKER_ARRAY);
		//u32TimeDiff = getTimeLoadLineIntArrayRange(hackerArray, LINE_OF_HACKER_ARRAY);
		vDataCacheFlush();

		xil_printf("\t%d", u32TimeDiff);
		// [cycles of 512kB miss] - u32TimeDiff = [time of X-Byte hit]
		// [time of X-Byte hit] / [time of 1-Byte hit] = [Y-Byte used by others]

		//getTimeLoadLineIntArrayRange(hackerArray, LINE_OF_HACKER_ARRAY);
		getTimeLoadIntArrayRange(hackerArray, SIZE_OF_HACKER_ARRAY);

		taskEXIT_CRITICAL();
		vTaskDelay( HACKER_TASK_DELAY_TIME_MS );

	}
}

/*****************************************************************************/
/**
* The application task, a FreeRTOS task function
* It keeps a loop filling (reading) the cache from 0KB~512KB.
*
* @param	None
*
* @return	None
*
* @note		None.
*
******************************************************************************/
u32 u32AppArray[SIZE_OF_APP_ARRAY];
static void prvAppTask(void *pvParameters){
	//u32 u32AppArray[SIZE_OF_APP_ARRAY];
	u32 ulLoop, ulLoop1;
	vTaskDelay( 10 / portTICK_RATE_MS );

	//while (1){
	for (ulLoop1=0; ulLoop1<TEST_CYCLES; ulLoop1++) {
		for (ulLoop=0; ulLoop <= SIZE_OF_APP_ARRAY; ulLoop+=2000/4){
			taskENTER_CRITICAL();

			getTimeLoadIntArrayRange(u32AppArray, ulLoop);	// Note that the unit of data read is 4-byte.
			//getTimeLoadIntArrayRange(u32AppArray, 2000);	// Note that the unit of data read is 4-byte.
			xil_printf("\r\n%d", ulLoop<<2);	// <<2 = *4

			taskEXIT_CRITICAL();
			vTaskDelay( APP_TASK_DELAY_TIME_MS );
		}
	}
	taskENTER_CRITICAL();
	while(1);
}
